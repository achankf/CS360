\begin{enumerate}
\item
Let $S = \{z\in \Sigma^* : yz \in L(M)\}$, $T = \{z\in \Sigma^* : xz \in L(M)\}$.
Suppose by way of contradiction that there exists $xz \in T$ but $xz \not\in S$.
Since $M$ has only 1 accepting state, say $q_{accept}$, so for all $yz \in S$, $\hat\delta(q_0, yz) = q_{accept}$.

Consequently, we have
\begin{align*}
\hat\delta(q_0,xz) &= q_{accept} & \text{because $xz \in L(M)$, and $M$ only has one state} \\
	&= \hat\delta(q_0, yz)
\end{align*}
That means $xz$ is accepted by the language $S$, which contradicts our assumptions.
Therefore, $T \subseteq S$.
Then, we can use the same arguments to deduce that $S \subseteq T$.
Together, we have $T = S$, as required.
\done

\item
Let's consider the language for 1a: $L = \{x \in \{a,b\}^* : n_a(x)$ is even, or $n_b(x)$ is even$\}$
\begin{claim}
The DFA for $L$ requires at least 3 accepting states.
\end{claim}
\begin{proof}
First, 1b shows a DFA for $L$ that use 3 states, so the ``at least 3 states" part is done.
Now we need to show that 2 accepting states or less is insufficient.

Suppose by way of contradiction that 3 states are sufficient.
Let $w \in L$.

Consider the possibilities in the number of a's and b's up to the $k$-th character of $w$. By the response for 1a, we have 4 possible combinations (even-even, even-odd, odd-even, odd-odd), and 3 of which meets our accepting requirement.

However, by the pigeonhole principle, 3 accepting possibilities in 2 accepting states means one of the states must contain 2 possibilities.
In other words, either the value of $\#_a(w)$ or $\#_b(w)$ is {\bf both odd and even at the same time}, which is a contradiction.
Therefore, the $DFA$ for $L$ requires at least 3 accepting states.
\end{proof}
Therefore, there exists a regular language that cannot be compute by a DFA that has 1 accepting state.
\done

\item
Let's prove by induction.

{\bf Base Case} If $M$ has 0 (the empty set) or 1 accepting state, then $A_1 = M$.
Thus,
\begin{align*}
L(M) = \cup_{i=1}^k L(A_i) = L(A_1)
\end{align*}

{\bf Inductive Step} Suppose a DFA $M = (\Sigma, Q, q_0, \delta, F)$, where $F = \{f_1, f_2, \cdots, f_k\} \subseteq Q$.
First, observe that we can reuse use the structure of $M$, and build a new DFA that accepts a word $w$ whenever $\hat\delta(q_0,w) = f_i \in F$, as in
\begin{align*}
A_i = (\Sigma, Q, q_0, \delta, \{f_i\})
\end{align*}

Since by definition $F$ is finite, so DFA's $A_1, \cdots, A_k$ can be built from the description above.
Then, similar to the proof about the union of DFA's, we can construct a {\bf product automaton} $A_1 \times \cdots \times A_k$, with accepting states as 
\begin{align*}
F &= \{(s_1, \cdots, s_k) \in F_1 \times \cdots \times F_k : s_i = f_i \text{ or } s_j = f_j, i \neq j\}
\end{align*}

The product automaton accepts $L(M)$  because all accepting states are covered by each $A_i$, and it runs all $k$ finite automata simultaneously -- it accepts $w$ as long as one of them accepts $w$.
Therefore, $L(A_1 \times \cdots \times A_k) = \cup_{i=1}^k L(A_i)$, as required.
\done
\end{enumerate}
